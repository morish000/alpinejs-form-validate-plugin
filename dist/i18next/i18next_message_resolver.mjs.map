{
  "version": 3,
  "sources": ["../../src/i18next/i18next_message_resolver.ts"],
  "sourcesContent": ["/**\n * @module i18nMessageResolver\n * This module provides a function to create a message resolver using i18next for internationalization support.\n */\nimport type { Alpine } from \"alpinejs\";\nimport type { i18n, TOptions } from \"i18next\";\nimport type { AlpineWithWatch } from \"../types/alpine_types.ts\";\nimport type { FunctionParameter } from \"../types/config_types.ts\";\nimport type { MessageResolver } from \"../types/functions_types.ts\";\n\n/**\n * Creates a message resolver using i18next to handle internationalization.\n *\n * @param {Object} store - An object containing the configuration for i18next.\n * @param {number} store.timestamp - A timestamp to track updates.\n * @param {function} store.i18next - A function that returns the i18next instance.\n * @returns {(Alpine: Alpine) => MessageResolver} A function that takes an Alpine instance and returns a MessageResolver.\n */\nexport const createI18NextMessageResolver =\n  (store: { timestamp: number; i18next: () => i18n }) =>\n    (Alpine: Alpine): MessageResolver => {\n      const i18next = store.i18next();\n      let listeners: (() => void)[] = [];\n      /**\n       * Watches for changes in the store's timestamp and triggers update listeners.\n       */\n      (Alpine as AlpineWithWatch).watch(\n        () => store.timestamp,\n        () => listeners.forEach((listener) => listener()),\n      );\n      return {\n        /**\n         * Adds a listener to the list of update listeners.\n         *\n         * @param {() => void} listener - The listener function to add.\n         */\n        addUpdateListener: (listener: () => void) => {\n          if (!listeners.includes(listener)) {\n            listeners.push(listener);\n          }\n        },\n        /**\n         * Removes a listener from the list of update listeners.\n         *\n         * @param {() => void} listenerToRemove - The listener function to remove.\n         */\n        removeUpdateListener: (listenerToRemove: () => void) => {\n          listeners = listeners.filter((listener) =>\n            listener !== listenerToRemove\n          );\n        },\n        /**\n         * Resolves a message key using i18next, falling back to the key if not found.\n         *\n         * @param {...FunctionParameter[]} args - The key and options for resolution.\n         * @returns {string} - The resolved message.\n         */\n        resolve: (...args: FunctionParameter[]) => {\n          const [key, options] = args;\n          return i18next.exists(key as (string | string[]))\n            ? i18next.t(key as (string | string[]), options as TOptions)\n            : key as string;\n        },\n      };\n    };\n"],
  "mappings": "AAkBO,MAAMA,EACVC,GACEC,GAAoC,CACnC,MAAMC,EAAUF,EAAM,QAAQ,EAC9B,IAAIG,EAA4B,CAAC,EAIjC,OAACF,EAA2B,MAC1B,IAAMD,EAAM,UACZ,IAAMG,EAAU,QAASC,GAAaA,EAAS,CAAC,CAClD,EACO,CAML,kBAAoBA,GAAyB,CACtCD,EAAU,SAASC,CAAQ,GAC9BD,EAAU,KAAKC,CAAQ,CAE3B,EAMA,qBAAuBC,GAAiC,CACtDF,EAAYA,EAAU,OAAQC,GAC5BA,IAAaC,CACf,CACF,EAOA,QAAS,IAAIC,IAA8B,CACzC,KAAM,CAACC,EAAKC,CAAO,EAAIF,EACvB,OAAOJ,EAAQ,OAAOK,CAA0B,EAC5CL,EAAQ,EAAEK,EAA4BC,CAAmB,EACzDD,CACN,CACF,CACF",
  "names": ["createI18NextMessageResolver", "store", "Alpine", "i18next", "listeners", "listener", "listenerToRemove", "args", "key", "options"]
}
