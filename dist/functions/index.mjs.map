{
  "version": 3,
  "sources": ["../../src/functions/custom_field_validator.ts", "../../src/functions/field_value_resolver.ts", "../../src/functions/html5_validation_message_resolver.ts", "../../src/functions/input_rate_limitter.ts", "../../src/functions/message_resolver.ts", "../../src/functions/message_store.ts"],
  "sourcesContent": ["/**\n * @module customFieldValidator\n * This module provides a function to create a custom field validator using specified validation functions.\n */\n\nimport type { FunctionParameter } from \"../types/config_types.ts\";\nimport type {\n  CustomFieldValidator,\n  FormFieldElements,\n  FormFieldValues,\n  ValidateFunctions,\n} from \"../types/functions_types.ts\";\n\n/**\n * Creates a custom field validator using specified validation functions.\n *\n * @param {ValidateFunctions} validator - An object containing validation functions.\n * @returns {CustomFieldValidator} - An object with methods to check support and validate field values.\n */\nexport const createCustomFieldValidator = (\n  validator: ValidateFunctions,\n): CustomFieldValidator => ({\n  /**\n   * Checks if a validation function is supported for a given field name.\n   *\n   * @param {string} name - The name of the validation function to check.\n   * @returns {boolean} - Returns true if the function is supported, false otherwise.\n   */\n  isSupported: (name: string) => typeof validator[name] === \"function\",\n  /**\n   * Validates the value of a form field using the specified validation function.\n   *\n   * @param {FormFieldElements} _el - The form element (not used in validation).\n   * @param {FormFieldValues} value - The value of the form field to validate.\n   * @param {string} name - The name of the validation function to use.\n   * @param {FunctionParameter[]} args - Additional arguments to pass to the validation function.\n   * @returns {boolean} - Returns true if validation succeeds, false otherwise.\n   */\n  validate: (\n    _el: FormFieldElements,\n    value: FormFieldValues,\n    name: string,\n    args: FunctionParameter[],\n  ) => {\n    const validateFunc = validator[name];\n    if (typeof validateFunc === \"function\") {\n      const result = validateFunc(value, ...args);\n      return typeof result === \"boolean\" ? result : false;\n    }\n    return false;\n  },\n});\n", "/**\n * @module fieldValueResolver\n * This module provides a function to create a resolver for field values, supporting various input types.\n */\n\nimport type {\n  FieldValueResolver,\n  FormFieldValues,\n} from \"../types/functions_types.ts\";\n\n/**\n * Creates a resolver for field values, supporting various input types.\n *\n * @returns {FieldValueResolver} - An object with methods to resolve field values and check if they are empty.\n */\nexport const createFieldValueResolver = (): FieldValueResolver => ({\n  /**\n   * Resolves the value of a form field based on its type.\n   *\n   * @param {HTMLElement} el - The form element to resolve the value from.\n   * @returns {FormFieldValues} - The resolved value of the form element.\n   * @throws {Error} - Throws an error if the form element is not found.\n   */\n  resolve: (\n    el,\n  ) => {\n    let value: FormFieldValues;\n\n    if (el.type === \"radio\") {\n      // For radio, return the value of the checked input with the same name, or an empty string if none are checked.\n      const form = el.form;\n      if (!form) {\n        throw new Error(\"A form element is required.\");\n      }\n      const selected: HTMLInputElement | null = form.querySelector(\n        `input[type=\"radio\"][name=\"${el.name}\"]:checked`,\n      );\n      value = selected ? selected.value : \"\";\n    } else if (el.type === \"checkbox\") {\n      // For checkbox, return an array of values of the checked inputs with the same name, or an empty array if none are checked.\n      const form = el.form;\n      if (!form) {\n        throw new Error(\"A form element is required.\");\n      }\n      const checkboxes: NodeListOf<HTMLInputElement> = form.querySelectorAll(\n        `input[type=\"checkbox\"][name=\"${el.name}\"]:checked`,\n      );\n      value = Array.from(checkboxes).map((checkbox) => checkbox.value);\n    } else if (el.type === \"file\" && el instanceof HTMLInputElement) {\n      // For file, return an array of the selected files, or an empty array if none are selected.\n      value = el.files ? Array.from(el.files) : [];\n    } else if (\n      el.tagName.toLowerCase() === \"select\" && el instanceof HTMLSelectElement\n    ) {\n      // For select, return an array if multiple is true (or empty if none selected), otherwise return a string (empty if none selected).\n      value = el.multiple\n        ? Array.from(el.selectedOptions).map((option) => option.value)\n        : el.value;\n    } else {\n      // For other types, return the value as a string.\n      value = el.value;\n    }\n\n    return value;\n  },\n  /**\n   * Checks if the provided value is considered empty.\n   *\n   * @param {FormFieldValues} value - The value to check.\n   * @returns {boolean} - Returns true if the value is empty, false otherwise.\n   */\n  isEmpty: (value) =>\n    !value\n      ? true\n      : typeof value === \"string\"\n      ? value.trim() === \"\"\n      : value.length === 0,\n});\n", "/**\n * @module html5ValidationMessageResolver\n * This module provides a function to create a resolver for HTML5 validation messages\n * based on validity state keys.\n */\n\nimport type {\n  FunctionParameter,\n  MessageConfig,\n  ValidityStateKeys,\n} from \"../types/config_types.ts\";\nimport type {\n  FormFieldElements,\n  Html5ValidationMessageResolver,\n} from \"../types/functions_types.ts\";\n\n/**\n * Creates a resolver for HTML5 validation messages based on validity state keys.\n *\n * @returns {Html5ValidationMessageResolver} - A function that checks a form field's validity and returns relevant messages.\n */\nexport const createHtml5ValidationMessageResolver =\n  (): Html5ValidationMessageResolver => {\n    // @see https://developer.mozilla.org/ja/docs/Web/API/ValidityState\n    const validityKeys: ValidityStateKeys[] = [\n      \"valueMissing\",\n      \"typeMismatch\",\n      \"patternMismatch\",\n      \"tooLong\",\n      \"tooShort\",\n      \"rangeUnderflow\",\n      \"rangeOverflow\",\n      \"stepMismatch\",\n      \"badInput\",\n    ];\n\n    return (\n      el: FormFieldElements,\n      messages: MessageConfig,\n    ) => {\n      /**\n       * Checks validity of the form element and returns appropriate messages.\n       *\n       * @param {FormFieldElements} el - The form field element to be validated.\n       * @param {MessageConfig} messages - Configuration for validation messages.\n       * @returns {FunctionParameter[] | null} - Array of messages if invalid, otherwise null.\n       */\n      if (el.checkValidity()) {\n        return null;\n      }\n      const key: ValidityStateKeys | undefined = validityKeys.find((k) =>\n        el.validity[k] && messages[k]\n      );\n      return key\n        ? messages[key] as FunctionParameter[]\n        : [el.validationMessage];\n    };\n  };\n", "/**\n * @module inputRateLimitter\n * This module provides a factory to create an input rate limitter using debounce or throttle techniques.\n */\n\nimport type { Debounce, Throttle } from \"../types/utils_types.ts\";\nimport type { InputRateLimitterCreator } from \"../types/functions_types.ts\";\n\n/**\n * Creates an input rate limitter based on the specified method and options.\n *\n * @param {Debounce} debounce - The debounce function to control input rate.\n * @param {Throttle} throttle - The throttle function to control input rate.\n * @returns {InputRateLimitterCreator} - A function that applies the specified input rate limiting technique.\n */\nexport const createInputRateLimitter = (\n  debounce: Debounce,\n  throttle: Throttle,\n): InputRateLimitterCreator =>\n(el, handler, { inputLimit, inputLimitOpts }) => {\n  if (!inputLimit) {\n    return handler;\n  }\n  const [method, wait] = inputLimit.split(\":\");\n\n  switch (method) {\n    case \"debounce\":\n      /**\n       * Applies debounce with the specified wait time and options.\n       *\n       * @param {Element} el - The element to which the handler is applied.\n       * @param {Function} handler - The function to be debounced.\n       * @param {number} wait - The wait time in milliseconds.\n       * @param {boolean} immediate - If true, triggers the function on the leading edge.\n       * @returns {Function} - The debounced function.\n       */\n      return debounce(\n        el,\n        handler,\n        Number(wait ?? inputLimitOpts.debounce.wait),\n        inputLimitOpts.debounce.immediate,\n      );\n    case \"throttle\":\n      /**\n       * Applies throttle with the specified wait time and options.\n       *\n       * @param {Element} el - The element to which the handler is applied.\n       * @param {Function} handler - The function to be throttled.\n       * @param {number} wait - The wait time in milliseconds.\n       * @param {Object} options - Throttle options.\n       * @returns {Function} - The throttled function.\n       */\n      return throttle(\n        el,\n        handler,\n        Number(wait ?? inputLimitOpts.throttle.wait),\n        inputLimitOpts.throttle.options,\n      );\n    case \"none\":\n      // Returns the original handler if no rate limiting is specified.\n      return handler;\n    default:\n      if (method) {\n        throw new Error(`Input rate limitter not found: ${method}.`);\n      }\n      return handler;\n  }\n};\n", "/**\n * @module messageResolver\n * This module provides a factory to create a message resolver for handling message operations.\n */\n\nimport type { FunctionParameter } from \"../types/config_types.ts\";\nimport type { MessageResolver } from \"../types/functions_types.ts\";\n\n/**\n * Creates a message resolver object for handling message operations.\n * Provides methods to add and remove update listeners and resolve messages from parameters.\n *\n * @returns {MessageResolver} - An object with methods to manage message updates and resolution.\n */\nexport const createMessageResolver = (): MessageResolver => ({\n  /**\n   * Adds an update listener for message changes.\n   */\n  addUpdateListener: () => {},\n  /**\n   * Removes an existing update listener.\n   */\n  removeUpdateListener: () => {},\n  /**\n   * Resolves a message from given parameters.\n   *\n   * @param {...FunctionParameter[]} args - Parameters for message resolution.\n   * @returns {string} - The resolved message as a string.\n   */\n  resolve: (...args: FunctionParameter[]) =>\n    args.length > 0 ? args[0].toString() : \"\",\n});\n", "/**\n * @module messageStore\n * This module provides a factory to create a message store for managing message values associated with DOM elements in Alpine.js applications.\n */\n\n// @deno-types=\"@types/alpinejs\"\nimport type { Alpine } from \"alpinejs\";\nimport type {\n  CreateMessageStore,\n  MessageStore,\n} from \"../types/functions_types.ts\";\n\n/**\n * Creates a message store for managing message values associated with DOM elements.\n *\n * @param {Alpine} Alpine - Alpine.js instance used to create reactive stores.\n * @returns {MessageStore} - An object providing methods to manipulate message values.\n */\nexport const createMessageStore: CreateMessageStore = (Alpine: Alpine) =>\n(\n  { messageResolver },\n  store = Alpine.reactive({}),\n): MessageStore => {\n  // Adds a listener to update message values when resolved message changes.\n  messageResolver.addUpdateListener(\n    () => {\n      Object.values(store).forEach((value) => {\n        if (value.value || value.param.length > 0) {\n          value.value = messageResolver.resolve(...value.param);\n          value.handleMessage(value.value);\n        }\n      });\n    },\n  );\n  return {\n    /**\n     * Initializes a message entry for a given element.\n     *\n     * @param {Element} el - The DOM element associated with the message.\n     * @param {function(string): void} handleMessage - Callback to handle message changes.\n     */\n    create: (el, handleMessage) => {\n      store[el.id] = {\n        handleMessage,\n        param: [],\n        value: \"\",\n      };\n      handleMessage(\"\");\n    },\n    /**\n     * Deletes a message entry for a given element.\n     *\n     * @param {Element} el - The DOM element whose message entry will be deleted.\n     */\n    delete: (el) => {\n      store[el.id].handleMessage(\"\");\n      delete store[el.id];\n    },\n    /**\n     * Sets message parameters and resolves the message value for a given element.\n     *\n     * @param {Element} el - The DOM element associated with the message.\n     * @param {Array} [message=[]] - Parameters used to resolve the message.\n     */\n    set: (el, message = []) => {\n      const value = messageResolver.resolve(...message);\n      store[el.id].param = message;\n      store[el.id].value = value;\n      store[el.id].handleMessage(value);\n    },\n    /**\n     * Retrieves the message value for a given element.\n     *\n     * @param {Element} el - The DOM element whose message value is retrieved.\n     * @returns {string} - The resolved message value.\n     */\n    get: (el) => {\n      return store[el.id] ? store[el.id].value : \"\";\n    },\n    /**\n     * Clears the message parameters and value for a given element.\n     *\n     * @param {Element} el - The DOM element whose message entry will be cleared.\n     */\n    clear: (el) => {\n      store[el.id].param = [];\n      store[el.id].value = \"\";\n      store[el.id].handleMessage(\"\");\n    },\n  };\n};\n"],
  "mappings": "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",
  "names": ["createCustomFieldValidator", "validator", "name", "_el", "value", "args", "validateFunc", "result", "createFieldValueResolver", "el", "value", "form", "selected", "checkboxes", "checkbox", "option", "createHtml5ValidationMessageResolver", "validityKeys", "el", "messages", "key", "k", "createInputRateLimitter", "debounce", "throttle", "el", "handler", "inputLimit", "inputLimitOpts", "method", "wait", "createMessageResolver", "args", "createMessageStore", "Alpine", "messageResolver", "store", "value", "el", "handleMessage", "message"]
}
