{
  "version": 3,
  "sources": ["../src/alpinejs_form_validate_plugin.ts"],
  "sourcesContent": ["/**\n * @module validationPlugin\n * This module provides a validation plugin for Alpine.js, enabling form and field validations.\n */\n\nimport type {\n  DirectiveData,\n  DirectiveUtilities,\n  ElementWithXAttributes,\n} from \"alpinejs\";\nimport type { Alpine } from \"./types/alpine_types.ts\";\nimport type {\n  FieldValidationConfig,\n  FieldValidationOption,\n  FormValidationConfig,\n  FormValidationOption,\n} from \"./types/config_types.ts\";\nimport type {\n  CreateMessageStore,\n  FormFieldElements,\n  Functions,\n  FunctionsOption,\n} from \"./types/functions_types.ts\";\nimport type {\n  CreateFieldValidator,\n  CreateFormValidator,\n} from \"./types/validators_types.ts\";\nimport { debounce, merge, throttle } from \"./utils/index.js\";\nimport {\n  fieldDefaultConfig,\n  formatMessageConfig,\n  formatValidationConfig,\n  formDefaultConfig,\n} from \"./config/index.js\";\nimport {\n  createFieldValueResolver,\n  createHtml5ValidationMessageResolver,\n  createInputRateLimitter,\n  createMessageResolver,\n  createMessageStore,\n} from \"./functions/index.js\";\nimport {\n  createFieldValidator,\n  createFormValidator,\n} from \"./validators/index.js\";\n\n/**\n * Creates a validation plugin for Alpine.js using the provided utilities and configurations.\n *\n * @param {Object} options - Options for creating the validation plugin.\n * @param {CreateMessageStore} options.createMessageStore - Function to create a message store.\n * @param {CreateFormValidator} options.createFormValidator - Function to create a form validator.\n * @param {CreateFieldValidator} options.createFieldValidator - Function to create a field validator.\n * @param {function(EventTarget): FormValidationConfig} options.formDefaultConfig - Function that returns default form validation configuration.\n * @param {function(): FieldValidationConfig} options.fieldDefaultConfig - Function that returns default field validation configuration.\n * @returns {function({defaultFunctionsOptions?: FunctionsOption, defaultFormOptions?: FormValidationOption, defaultFieldOptions?: FieldValidationOption}=): function(Alpine: Alpine): void} - A function to configure and initialize the plugin with optional default configurations.\n */\nexport const createValidatePluginInternal = (\n  {\n    createMessageStore,\n    createFormValidator,\n    createFieldValidator,\n    formDefaultConfig,\n    fieldDefaultConfig,\n  }: {\n    createMessageStore: CreateMessageStore;\n    createFormValidator: CreateFormValidator;\n    createFieldValidator: CreateFieldValidator;\n    formDefaultConfig: (el: EventTarget) => FormValidationConfig;\n    fieldDefaultConfig: () => FieldValidationConfig;\n  },\n) =>\n  (\n    {\n      defaultFunctionsOptions = {},\n      defaultFormOptions = {},\n      defaultFieldOptions = {},\n    }: {\n      defaultFunctionsOptions?: FunctionsOption;\n      defaultFormOptions?: FormValidationOption;\n      defaultFieldOptions?: FieldValidationOption;\n    } = {},\n  ) =>\n    (Alpine: Alpine): void => {\n      const functions: Functions = (() => {\n        const opts = {\n          fieldValueResolver: defaultFunctionsOptions.fieldValueResolver ??\n            createFieldValueResolver(),\n          messageResolver: defaultFunctionsOptions.messageResolver ??\n            createMessageResolver(),\n          customFieldValidators: defaultFunctionsOptions.customFieldValidators ??\n            [],\n          inputRateLimitter: defaultFunctionsOptions.inputRateLimitter ??\n            createInputRateLimitter(debounce, throttle),\n          html5ValidationMessageResolver:\n            defaultFunctionsOptions.html5ValidationMessageResolver ??\n            createHtml5ValidationMessageResolver(),\n        };\n        return {\n          ...opts,\n          messageStore: defaultFunctionsOptions.messageStore ??\n            createMessageStore(Alpine)(opts),\n        };\n      })();\n\n      Alpine.directive(\n        \"validate-form\",\n        (\n          el: ElementWithXAttributes,\n          { expression }: DirectiveData,\n          { evaluate, cleanup }: DirectiveUtilities,\n        ) => {\n          /**\n           * Merges and returns the form validation configuration for the element.\n           * @returns {FormValidationConfig} - The merged form validation configuration.\n           */\n          const config: FormValidationConfig = (() => {\n            const formConfig = { ...formDefaultConfig(el) };\n            const formOptions = { ...defaultFormOptions };\n            const formExpression = {\n              ...(expression ? evaluate(expression) : {}) as FormValidationOption,\n            };\n\n            const merged: FormValidationConfig = merge(\n              formConfig,\n              formOptions,\n              formExpression,\n            );\n\n            merged.trigger.target = (formExpression.trigger?.target ??\n              formOptions.trigger?.target ??\n              formConfig.trigger.target) as EventTarget;\n\n            return merged;\n          })();\n\n          // console.log(config);\n\n          const { before, after, preventDefault } = config.trigger;\n          const formValidator = createFormValidator(el as HTMLFormElement, config);\n\n          /**\n           * Handles the form validation event, invoking configured callbacks and triggering success or failure events.\n           * @param {Event} event - The event that triggered form validation.\n           */\n          const handleEvent = (event: Event) => {\n            before?.call(el, event);\n            const isValid = formValidator.call(el);\n            after?.call(el, event);\n\n            if (!isValid && preventDefault) {\n              event.preventDefault();\n            }\n\n            if (isValid) {\n              el.dispatchEvent(\n                new CustomEvent(`${Alpine.prefixed(\"validate\")}:success`),\n              );\n            } else {\n              el.dispatchEvent(\n                new CustomEvent(`${Alpine.prefixed(\"validate\")}:failed`),\n              );\n            }\n          };\n\n          const { target, event: eventName } = config.trigger;\n          target.addEventListener(eventName, handleEvent);\n\n          (el as { _x_validation?: FormValidationConfig })._x_validation = config;\n          cleanup(() => {\n            target.removeEventListener(eventName, handleEvent);\n            delete (el as { _x_validation?: FormValidationConfig })._x_validation;\n          });\n        },\n      );\n\n      Alpine.directive(\n        \"validate\",\n        (\n          el: ElementWithXAttributes,\n          { expression }: DirectiveData,\n          { evaluate, cleanup }: DirectiveUtilities,\n        ) => {\n          if (!el.id || !(el as FormFieldElements).name) {\n            throw new Error(\n              \"Validation error: Form elements with validation rules must have an id and name attribute.\",\n            );\n          }\n\n          /**\n           * Merges and returns the field validation configuration for the element.\n           * @returns {FieldValidationConfig} - The merged field validation configuration.\n           */\n          const config: FieldValidationConfig = (() => {\n            const inputConfig = merge(\n              fieldDefaultConfig(),\n              defaultFieldOptions,\n              (el as FormFieldElements).form?._x_validation?.report != null\n                ? {\n                  report: (el as FormFieldElements).form?._x_validation.report,\n                }\n                : {},\n              expression ? evaluate(expression) : {},\n            );\n            inputConfig.v = formatValidationConfig(inputConfig.v);\n            inputConfig.m = formatMessageConfig(inputConfig.m);\n            return inputConfig;\n          })();\n\n          // console.log(config);\n\n          const validate = createFieldValidator(Alpine)(\n            el as FormFieldElements,\n            config,\n            functions,\n          );\n\n          /**\n           * Creates a validation field handler to manage before and after hooks.\n           * @param {Object} hooks - Before and after hooks.\n           * @param {function} validate - The validation function to call.\n           * @returns {function(Event=): void} - The event handler function.\n           */\n          const createValidateFieldHandler = (\n            { before, after }: {\n              before?: ((e?: Event) => void) | null;\n              after?: ((e?: Event) => void) | null;\n            },\n            validate: () => void,\n          ) => {\n            return (e?: Event) => {\n              before?.call(el, e);\n              validate.apply(el);\n              (el as FormFieldElements)._x_validation?.formSubmit &&\n                config.report && (el as FormFieldElements).reportValidity();\n              after?.call(el, e);\n            };\n          };\n\n          const events: { eventName: string; handler: (e: Event) => void }[] = [];\n\n          /**\n           * Registers an event handler based on given conditions.\n           * @param {boolean} condition - Condition to check before registering.\n           * @param {string} eventName - Name of the event.\n           * @param {function(Event): void} eventHandler - The event handler function.\n           */\n          const registerEvent = (\n            condition: boolean,\n            eventName: string,\n            eventHandler: (e: Event) => void,\n          ) => {\n            if (condition && eventHandler) {\n              events.push({ eventName, handler: eventHandler });\n            }\n          };\n\n          registerEvent(\n            !!config.onChange || (!config.onBlur && !config.onInput),\n            \"change\",\n            createValidateFieldHandler(\n              !config.onChange || config.onChange === true ? {} : config.onChange,\n              validate,\n            ),\n          );\n          registerEvent(\n            !!config.onBlur,\n            \"blur\",\n            createValidateFieldHandler(\n              !config.onBlur || config.onBlur === true ? {} : config.onBlur,\n              validate,\n            ),\n          );\n          registerEvent(\n            !!config.onInput,\n            \"input\",\n            functions.inputRateLimitter(\n              el,\n              createValidateFieldHandler(\n                !config.onInput || config.onInput === true ? {} : config.onInput,\n                validate,\n              ),\n              config,\n            ),\n          );\n\n          (el as FormFieldElements)._x_validation = {\n            ...config,\n            formSubmit: !(el as FormFieldElements).form,\n            validate: function () {\n              validate();\n              this.formSubmit = true;\n              if ([\"radio\", \"checkbox\"].includes((el as FormFieldElements).type)) {\n                Array.from<FormFieldElements>(\n                  (el as FormFieldElements).form?.querySelectorAll(\n                    `input[type=\"${(el as FormFieldElements).type}\"][name=\"${(el as FormFieldElements).name\n                    }\"]`,\n                  ) ?? [],\n                )\n                  .filter((elem: FormFieldElements) =>\n                    elem !== el && !elem.hasAttribute(Alpine.prefixed(\"validate\"))\n                  )\n                  .forEach((elem: FormFieldElements) => {\n                    events.forEach(({ eventName, handler }) => {\n                      elem.addEventListener(eventName, handler);\n                    });\n                  });\n              }\n            },\n          };\n\n          functions.messageStore.create(\n            el as FormFieldElements,\n            (message) => {\n              (el as FormFieldElements).setCustomValidity(message);\n            },\n          );\n\n          events.forEach(({ eventName, handler }) => {\n            el.addEventListener(eventName, handler);\n          });\n\n          cleanup(() => {\n            if ([\"radio\", \"checkbox\"].includes((el as FormFieldElements).type)) {\n              Array.from<FormFieldElements>(\n                (el as FormFieldElements).form?.querySelectorAll(\n                  `input[type=\"${(el as FormFieldElements).type}\"][name=\"${(el as FormFieldElements).name\n                  }\"]`,\n                ) ?? [],\n              )\n                .filter((elem: FormFieldElements) =>\n                  elem !== el && !elem.hasAttribute(Alpine.prefixed(\"validate\"))\n                )\n                .forEach((elem: FormFieldElements) => {\n                  events.forEach(({ eventName, handler }) => {\n                    elem.removeEventListener(eventName, handler);\n                  });\n                });\n            }\n            events.forEach(({ eventName, handler }) => {\n              el.removeEventListener(eventName, handler);\n              (handler as { cancel?: () => void }).cancel?.();\n            });\n            functions.messageStore.delete(el as FormFieldElements);\n            delete (el as FormFieldElements)._x_validation;\n          });\n        },\n      );\n\n      Alpine.directive(\n        \"validate-message-for\",\n        (\n          el: ElementWithXAttributes,\n          { expression }: DirectiveData,\n          { effect }: DirectiveUtilities,\n        ) => {\n          /**\n           * Evaluates and updates the text content based on the validation message store.\n           */\n          effect(() => {\n            const field = document.querySelector(expression);\n            Alpine.mutateDom(() => {\n              el.textContent = field\n                ? functions.messageStore.get(field as FormFieldElements)\n                : \"\";\n            });\n          });\n        },\n      );\n    };\n\n/**\n * Creates a validation plugin for Alpine.js with optional configurations.\n *\n * @param {Object?} [options] - Optional configuration for the validation plugin.\n * @param {FunctionsOption?} [options.defaultFunctionsOptions] - Default functions options.\n * @param {FormValidationOption?} [options.defaultFormOptions] - Default form validation options.\n * @param {FieldValidationOption?} [options.defaultFieldOptions] - Default field validation options.\n * @returns {function(Alpine: Alpine): void} - A function that initializes a validation plugin for Alpine.js.\n */\nexport const createValidatePlugin: (\n  options?: {\n    defaultFunctionsOptions?: FunctionsOption;\n    defaultFormOptions?: FormValidationOption;\n    defaultFieldOptions?: FieldValidationOption;\n  },\n) => (Alpine: Alpine) => void = createValidatePluginInternal({\n  createMessageStore,\n  createFormValidator,\n  createFieldValidator,\n  formDefaultConfig,\n  fieldDefaultConfig,\n});\n\n/**\n * Initializes and returns a default validation plugin instance for Alpine.js.\n *\n * @param {Alpine} Alpine - The Alpine.js instance to which the validation plugin will be integrated.\n * @returns {void} - The function does not return a value; it directly integrates the plugin with Alpine.js.\n */\nexport const createValidatePluginDefault: (Alpine: Alpine) => void =\n  createValidatePlugin();\n"],
  "mappings": "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",
  "names": ["debounce", "merge", "throttle", "fieldDefaultConfig", "formatMessageConfig", "formatValidationConfig", "formDefaultConfig", "createFieldValueResolver", "createHtml5ValidationMessageResolver", "createInputRateLimitter", "createMessageResolver", "createMessageStore", "createFieldValidator", "createFormValidator", "createValidatePluginInternal", "defaultFunctionsOptions", "defaultFormOptions", "defaultFieldOptions", "Alpine", "functions", "opts", "el", "expression", "evaluate", "cleanup", "config", "formConfig", "formOptions", "formExpression", "merged", "before", "after", "preventDefault", "formValidator", "handleEvent", "event", "isValid", "target", "eventName", "inputConfig", "validate", "createValidateFieldHandler", "e", "events", "registerEvent", "condition", "eventHandler", "elem", "handler", "message", "effect", "field", "createValidatePlugin", "createValidatePluginDefault"]
}
