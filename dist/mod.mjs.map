{
  "version": 3,
  "sources": ["../src/utils/debounce.ts", "../src/utils/throttle.ts", "../src/utils/merge.ts", "../src/config/message_config.ts", "../src/config/validation_config.ts", "../src/config/default_config.ts", "../src/functions/custom_field_validator.ts", "../src/functions/field_value_resolver.ts", "../src/functions/html5_validation_message_resolver.ts", "../src/functions/input_rate_limitter.ts", "../src/functions/message_resolver.ts", "../src/functions/message_store.ts", "../src/validators/field_validator.ts", "../src/validators/form_validator.ts", "../src/alpinejs_form_validate_plugin.ts", "../src/i18next/alpinejs_i18next_plugin.ts"],
  "sourcesContent": ["/**\n * @module debounceUtility\n * This module provides a debounce utility function to delay invoking a function until after a specified wait time.\n */\n\n// deno-lint-ignore no-unused-vars\nimport type { Debounce, LimittedHandler } from \"../types/utils_types.ts\";\n\n/**\n * Creates a debounced function that delays invoking the provided function\n * until after a specified wait time has elapsed since the last time it was invoked.\n * Optionally, it can invoke the function immediately on the leading edge.\n *\n * @param {HTMLElement} el - The context element to bind the function to.\n * @param {(e?: Event) => void} func - The function to debounce.\n * @param {number} wait - The number of milliseconds to delay.\n * @param {boolean} immediate - Whether to execute the function on the leading edge.\n * @returns {LimittedHandler} The debounced function with a cancel method.\n */\nexport const debounce: Debounce = (el, func, wait, immediate) => {\n  let timeout: number | null;\n  const debounced = function (e?: Event) {\n    const callNow = immediate && !timeout;\n    timeout && clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      timeout = null;\n      if (!immediate) func.call(el, e);\n    }, wait);\n    if (callNow) func.call(el, e);\n  };\n  debounced.cancel = () => timeout && clearTimeout(timeout);\n  return debounced;\n};\n", "/**\n * @module throttleUtility\n * This module provides a throttle utility function to limit the rate at which a specified function can be invoked.\n */\n\n// deno-lint-ignore no-unused-vars\nimport type { LimittedHandler, Throttle } from \"../types/utils_types.ts\";\n\n/**\n * Creates a throttled function that only invokes the provided function at most once per every `wait` milliseconds.\n *\n * @param {Element} el - The context in which the function should be called.\n * @param {(e?: Event) => void} func - The function to throttle.\n * @param {number} wait - The number of milliseconds to throttle invocations to.\n * @param {Object} options - Options to configure the throttle behavior.\n * @param {boolean} [options.leading=true] - Specify invoking on the leading edge.\n * @param {boolean} [options.trailing=true] - Specify invoking on the trailing edge.\n * @returns {LimittedHandler} A new throttled function with a `cancel` method to clear pending invocations.\n */\nexport const throttle: Throttle = (\n  el,\n  func,\n  wait,\n  { leading = true, trailing = true } = {},\n) => {\n  let lastFunc: number | null;\n  let lastRan: number = 0;\n  const throttled = function (e?: Event) {\n    const now = Date.now();\n\n    if (!lastRan && !leading) lastRan = now;\n\n    const remaining = wait - (now - lastRan);\n\n    if (remaining <= 0) {\n      if (leading || lastRan) {\n        func.call(el, e);\n        lastRan = now;\n      }\n      lastFunc !== null && clearTimeout(lastFunc);\n    } else if (trailing) {\n      lastFunc && clearTimeout(lastFunc);\n      lastFunc = setTimeout(() => {\n        if (!leading || lastRan) {\n          func.call(el, e);\n          lastRan = leading ? Date.now() : 0;\n        }\n      }, remaining);\n    }\n  };\n  throttled.cancel = () => lastFunc && clearTimeout(lastFunc);\n  return throttled;\n};\n", "/**\n * @module objectMergeUtility\n * This module provides a utility function to deeply merge multiple objects into the first object.\n */\n\n// deno-lint-ignore-file no-explicit-any\n\n/**\n * Deeply merges multiple objects into the first object.\n * Functions are not merged, but all other types are recursively merged.\n *\n * @template T - The type of the primary object to merge into.\n * @param {T} first - The initial object that other objects will be merged into.\n * @param {...any[]} rest - Additional objects to merge into the first object.\n * @returns {T} The merged object.\n */\nexport const merge = <T extends object>(first: T, ...rest: any[]): T => {\n  const result = { ...first };\n\n  return rest.reduce((acc, obj) => {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (\n        typeof value !== \"function\" && value instanceof Object && key in acc &&\n        acc[key] instanceof Object\n      ) {\n        acc[key] = merge(acc[key] as any, value);\n      } else if (value !== null && value !== undefined) {\n        acc[key] = value;\n      }\n    });\n    return acc;\n  }, result) as T;\n};\n", "/**\n * @module messageConfigFormatter\n * This module provides a function to format message configurations, ensuring each message value is an array.\n */\n\nimport type {\n  MessageConfig,\n  MessageOption,\n  ValidityStateKeys,\n} from \"../types/config_types.ts\";\n\n/**\n * Formats the message configuration.\n *\n * @param {MessageOption} input - The input message configuration to be formatted.\n * @returns {MessageConfig} The formatted message configuration where each value is an array.\n */\nexport const formatMessageConfig = (input: MessageOption): MessageConfig => {\n  const result: MessageConfig = {};\n\n  Object.entries(input).forEach(([key, value]) => {\n    /**\n     * Ensures each message value is in an array format.\n     *\n     * @type {ValidityStateKeys}\n     */\n    result[key as ValidityStateKeys] = Array.isArray(value) ? value : [value];\n  });\n\n  return result;\n};\n", "/**\n * @module validationConfigFormatter\n * This module provides a function to format a validation configuration from an abbreviated form to a full ValidationConfig object.\n */\n\nimport type {\n  FunctionParameter,\n  ValidationConfig,\n  ValidationOption,\n  ValidatorFunction,\n} from \"../types/config_types.ts\";\n\n/**\n * Formats a validation configuration from an abbreviated form to a full ValidationConfig object.\n *\n * @param {ValidationOption} abbreviated - The abbreviated validation configuration.\n * @returns {ValidationConfig} - The formatted validation configuration.\n * @throws {Error} - Throws an error if the message (m) is undefined for any validation key.\n */\nexport const formatValidationConfig = (\n  abbreviated: ValidationOption,\n): ValidationConfig => {\n  const result: ValidationConfig = {};\n\n  Object.entries(abbreviated).forEach(([key, value]) => {\n    let v: ValidatorFunction | FunctionParameter[] | null = null;\n    let m: FunctionParameter[] | null = null;\n\n    if (Array.isArray(value)) {\n      if (typeof value[0] === \"function\") {\n        /**\n         * Handles value as an array where the first element is a function.\n         *\n         * @type {ValidatorFunction}\n         */\n        v = value[0];\n        m = Array.isArray(value[1]) ? value[1] : [value[1]];\n      } else {\n        /**\n         * Handles value as an array where the first element is not a function, treats it as messages.\n         *\n         * @type {FunctionParameter[]}\n         */\n        m = value;\n      }\n    } else if (\n      typeof value === \"object\" &&\n      Object.keys(value).every((key) => key === \"v\" || key === \"m\") &&\n      (\"v\" in value || \"m\" in value)\n    ) {\n      /**\n       * Processes value as an object with 'v' and/or 'm' properties.\n       *\n       * @type {ValidatorFunction | FunctionParameter[]}\n       */\n      v = \"v\" in value\n        ? Array.isArray(value.v)\n          ? value.v as FunctionParameter[]\n          : typeof value.v === \"function\"\n          ? value.v as ValidatorFunction\n          : [value.v as FunctionParameter]\n        : null;\n      /**\n       * @type {FunctionParameter[]}\n       */\n      m = \"m\" in value ? (Array.isArray(value.m) ? value.m : [value.m]) : null;\n    } else if (value !== null) {\n      /**\n       * Sets messages for non-null values that are not arrays or objects.\n       *\n       * @type {FunctionParameter[]}\n       */\n      m = [value];\n    }\n\n    if (!m) {\n      throw new Error(`Message undefined. validation key: ${key}`);\n    }\n\n    result[key] = {\n      v: v ?? [],\n      m: m,\n    };\n  });\n\n  return result;\n};\n", "/**\n * @module validationConfigDefaults\n * This module provides default configurations for form and field validation.\n */\n\nimport type {\n  FieldValidationConfig,\n  FormValidationConfig,\n} from \"../types/config_types.ts\";\n\n/**\n * Creates the default configuration for form validation.\n *\n * @param {EventTarget} el - The event target for the form submission.\n * @returns {FormValidationConfig} The default configuration for handling form submission and validation.\n */\nexport const formDefaultConfig = (el: EventTarget): FormValidationConfig => ({\n  report: true,\n  trigger: {\n    target: el,\n    event: \"submit\",\n    preventDefault: true,\n    before: null,\n    after: null,\n  },\n});\n\n/**\n * Creates the default configuration for field validation.\n *\n * @returns {FieldValidationConfig} The default configuration for handling field validation,\n * including reporting options and input change settings.\n */\nexport const fieldDefaultConfig = (): FieldValidationConfig => (\n  {\n    v: {},\n    m: {},\n    report: false,\n    onChange: true,\n    onBlur: false,\n    onInput: false,\n    inputLimit: \"none\",\n    inputLimitOpts: {\n      debounce: { wait: 250, immediate: false },\n      throttle: {\n        wait: 500,\n        options: { leading: false, trailing: true },\n      },\n    },\n  }\n);\n", "/**\n * @module customFieldValidator\n * This module provides a function to create a custom field validator using specified validation functions.\n */\n\nimport type { FunctionParameter } from \"../types/config_types.ts\";\nimport type {\n  CustomFieldValidator,\n  FormFieldElements,\n  FormFieldValues,\n  ValidateFunctions,\n} from \"../types/functions_types.ts\";\n\n/**\n * Creates a custom field validator using specified validation functions.\n *\n * @param {ValidateFunctions} validator - An object containing validation functions.\n * @returns {CustomFieldValidator} - An object with methods to check support and validate field values.\n */\nexport const createCustomFieldValidator = (\n  validator: ValidateFunctions,\n): CustomFieldValidator => ({\n  /**\n   * Checks if a validation function is supported for a given field name.\n   *\n   * @param {string} name - The name of the validation function to check.\n   * @returns {boolean} - Returns true if the function is supported, false otherwise.\n   */\n  isSupported: (name: string) => typeof validator[name] === \"function\",\n  /**\n   * Validates the value of a form field using the specified validation function.\n   *\n   * @param {FormFieldElements} _el - The form element (not used in validation).\n   * @param {FormFieldValues} value - The value of the form field to validate.\n   * @param {string} name - The name of the validation function to use.\n   * @param {FunctionParameter[]} args - Additional arguments to pass to the validation function.\n   * @returns {boolean} - Returns true if validation succeeds, false otherwise.\n   */\n  validate: (\n    _el: FormFieldElements,\n    value: FormFieldValues,\n    name: string,\n    args: FunctionParameter[],\n  ) => {\n    const validateFunc = validator[name];\n    if (typeof validateFunc === \"function\") {\n      const result = validateFunc(value, ...args);\n      return typeof result === \"boolean\" ? result : false;\n    }\n    return false;\n  },\n});\n", "/**\n * @module fieldValueResolver\n * This module provides a function to create a resolver for field values, supporting various input types.\n */\n\nimport type {\n  FieldValueResolver,\n  FormFieldValues,\n} from \"../types/functions_types.ts\";\n\n/**\n * Creates a resolver for field values, supporting various input types.\n *\n * @returns {FieldValueResolver} - An object with methods to resolve field values and check if they are empty.\n */\nexport const createFieldValueResolver = (): FieldValueResolver => ({\n  /**\n   * Resolves the value of a form field based on its type.\n   *\n   * @param {HTMLElement} el - The form element to resolve the value from.\n   * @returns {FormFieldValues} - The resolved value of the form element.\n   * @throws {Error} - Throws an error if the form element is not found.\n   */\n  resolve: (\n    el,\n  ) => {\n    let value: FormFieldValues;\n\n    if (el.type === \"radio\") {\n      // For radio, return the value of the checked input with the same name, or an empty string if none are checked.\n      const form = el.form;\n      if (!form) {\n        throw new Error(\"A form element is required.\");\n      }\n      const selected: HTMLInputElement | null = form.querySelector(\n        `input[type=\"radio\"][name=\"${el.name}\"]:checked`,\n      );\n      value = selected ? selected.value : \"\";\n    } else if (el.type === \"checkbox\") {\n      // For checkbox, return an array of values of the checked inputs with the same name, or an empty array if none are checked.\n      const form = el.form;\n      if (!form) {\n        throw new Error(\"A form element is required.\");\n      }\n      const checkboxes: NodeListOf<HTMLInputElement> = form.querySelectorAll(\n        `input[type=\"checkbox\"][name=\"${el.name}\"]:checked`,\n      );\n      value = Array.from(checkboxes).map((checkbox) => checkbox.value);\n    } else if (el.type === \"file\" && el instanceof HTMLInputElement) {\n      // For file, return an array of the selected files, or an empty array if none are selected.\n      value = el.files ? Array.from(el.files) : [];\n    } else if (\n      el.tagName.toLowerCase() === \"select\" && el instanceof HTMLSelectElement\n    ) {\n      // For select, return an array if multiple is true (or empty if none selected), otherwise return a string (empty if none selected).\n      value = el.multiple\n        ? Array.from(el.selectedOptions).map((option) => option.value)\n        : el.value;\n    } else {\n      // For other types, return the value as a string.\n      value = el.value;\n    }\n\n    return value;\n  },\n  /**\n   * Checks if the provided value is considered empty.\n   *\n   * @param {FormFieldValues} value - The value to check.\n   * @returns {boolean} - Returns true if the value is empty, false otherwise.\n   */\n  isEmpty: (value) =>\n    !value\n      ? true\n      : typeof value === \"string\"\n      ? value.trim() === \"\"\n      : value.length === 0,\n});\n", "/**\n * @module html5ValidationMessageResolver\n * This module provides a function to create a resolver for HTML5 validation messages\n * based on validity state keys.\n */\n\nimport type {\n  FunctionParameter,\n  MessageConfig,\n  ValidityStateKeys,\n} from \"../types/config_types.ts\";\nimport type {\n  FormFieldElements,\n  Html5ValidationMessageResolver,\n} from \"../types/functions_types.ts\";\n\n/**\n * Creates a resolver for HTML5 validation messages based on validity state keys.\n *\n * @returns {Html5ValidationMessageResolver} - A function that checks a form field's validity and returns relevant messages.\n */\nexport const createHtml5ValidationMessageResolver =\n  (): Html5ValidationMessageResolver => {\n    // @see https://developer.mozilla.org/ja/docs/Web/API/ValidityState\n    const validityKeys: ValidityStateKeys[] = [\n      \"valueMissing\",\n      \"typeMismatch\",\n      \"patternMismatch\",\n      \"tooLong\",\n      \"tooShort\",\n      \"rangeUnderflow\",\n      \"rangeOverflow\",\n      \"stepMismatch\",\n      \"badInput\",\n    ];\n\n    return (\n      el: FormFieldElements,\n      messages: MessageConfig,\n    ) => {\n      /**\n       * Checks validity of the form element and returns appropriate messages.\n       *\n       * @param {FormFieldElements} el - The form field element to be validated.\n       * @param {MessageConfig} messages - Configuration for validation messages.\n       * @returns {FunctionParameter[] | null} - Array of messages if invalid, otherwise null.\n       */\n      if (el.checkValidity()) {\n        return null;\n      }\n      const key: ValidityStateKeys | undefined = validityKeys.find((k) =>\n        el.validity[k] && messages[k]\n      );\n      return key\n        ? messages[key] as FunctionParameter[]\n        : [el.validationMessage];\n    };\n  };\n", "/**\n * @module inputRateLimitter\n * This module provides a factory to create an input rate limitter using debounce or throttle techniques.\n */\n\nimport type { Debounce, Throttle } from \"../types/utils_types.ts\";\nimport type { InputRateLimitterCreator } from \"../types/functions_types.ts\";\n\n/**\n * Creates an input rate limitter based on the specified method and options.\n *\n * @param {Debounce} debounce - The debounce function to control input rate.\n * @param {Throttle} throttle - The throttle function to control input rate.\n * @returns {InputRateLimitterCreator} - A function that applies the specified input rate limiting technique.\n */\nexport const createInputRateLimitter = (\n  debounce: Debounce,\n  throttle: Throttle,\n): InputRateLimitterCreator =>\n(el, handler, { inputLimit, inputLimitOpts }) => {\n  if (!inputLimit) {\n    return handler;\n  }\n  const [method, wait] = inputLimit.split(\":\");\n\n  switch (method) {\n    case \"debounce\":\n      /**\n       * Applies debounce with the specified wait time and options.\n       *\n       * @param {Element} el - The element to which the handler is applied.\n       * @param {Function} handler - The function to be debounced.\n       * @param {number} wait - The wait time in milliseconds.\n       * @param {boolean} immediate - If true, triggers the function on the leading edge.\n       * @returns {Function} - The debounced function.\n       */\n      return debounce(\n        el,\n        handler,\n        Number(wait ?? inputLimitOpts.debounce.wait),\n        inputLimitOpts.debounce.immediate,\n      );\n    case \"throttle\":\n      /**\n       * Applies throttle with the specified wait time and options.\n       *\n       * @param {Element} el - The element to which the handler is applied.\n       * @param {Function} handler - The function to be throttled.\n       * @param {number} wait - The wait time in milliseconds.\n       * @param {Object} options - Throttle options.\n       * @returns {Function} - The throttled function.\n       */\n      return throttle(\n        el,\n        handler,\n        Number(wait ?? inputLimitOpts.throttle.wait),\n        inputLimitOpts.throttle.options,\n      );\n    case \"none\":\n      // Returns the original handler if no rate limiting is specified.\n      return handler;\n    default:\n      if (method) {\n        throw new Error(`Input rate limitter not found: ${method}.`);\n      }\n      return handler;\n  }\n};\n", "/**\n * @module messageResolver\n * This module provides a factory to create a message resolver for handling message operations.\n */\n\nimport type { FunctionParameter } from \"../types/config_types.ts\";\nimport type { MessageResolver } from \"../types/functions_types.ts\";\n\n/**\n * Creates a message resolver object for handling message operations.\n * Provides methods to add and remove update listeners and resolve messages from parameters.\n *\n * @returns {MessageResolver} - An object with methods to manage message updates and resolution.\n */\nexport const createMessageResolver = (): MessageResolver => ({\n  /**\n   * Adds an update listener for message changes.\n   */\n  addUpdateListener: () => {},\n  /**\n   * Removes an existing update listener.\n   */\n  removeUpdateListener: () => {},\n  /**\n   * Resolves a message from given parameters.\n   *\n   * @param {...FunctionParameter[]} args - Parameters for message resolution.\n   * @returns {string} - The resolved message as a string.\n   */\n  resolve: (...args: FunctionParameter[]) =>\n    args.length > 0 ? args[0].toString() : \"\",\n});\n", "/**\n * @module messageStore\n * This module provides a factory to create a message store for managing message values associated with DOM elements in Alpine.js applications.\n */\n\n// @deno-types=\"@types/alpinejs\"\nimport type { Alpine } from \"alpinejs\";\nimport type {\n  CreateMessageStore,\n  MessageStore,\n} from \"../types/functions_types.ts\";\n\n/**\n * Creates a message store for managing message values associated with DOM elements.\n *\n * @param {Alpine} Alpine - Alpine.js instance used to create reactive stores.\n * @returns {MessageStore} - An object providing methods to manipulate message values.\n */\nexport const createMessageStore: CreateMessageStore = (Alpine: Alpine) =>\n(\n  { messageResolver },\n  store = Alpine.reactive({}),\n): MessageStore => {\n  // Adds a listener to update message values when resolved message changes.\n  messageResolver.addUpdateListener(\n    () => {\n      Object.values(store).forEach((value) => {\n        if (value.value || value.param.length > 0) {\n          value.value = messageResolver.resolve(...value.param);\n          value.handleMessage(value.value);\n        }\n      });\n    },\n  );\n  return {\n    /**\n     * Initializes a message entry for a given element.\n     *\n     * @param {Element} el - The DOM element associated with the message.\n     * @param {function(string): void} handleMessage - Callback to handle message changes.\n     */\n    create: (el, handleMessage) => {\n      store[el.id] = {\n        handleMessage,\n        param: [],\n        value: \"\",\n      };\n      handleMessage(\"\");\n    },\n    /**\n     * Deletes a message entry for a given element.\n     *\n     * @param {Element} el - The DOM element whose message entry will be deleted.\n     */\n    delete: (el) => {\n      store[el.id].handleMessage(\"\");\n      delete store[el.id];\n    },\n    /**\n     * Sets message parameters and resolves the message value for a given element.\n     *\n     * @param {Element} el - The DOM element associated with the message.\n     * @param {Array} [message=[]] - Parameters used to resolve the message.\n     */\n    set: (el, message = []) => {\n      const value = messageResolver.resolve(...message);\n      store[el.id].param = message;\n      store[el.id].value = value;\n      store[el.id].handleMessage(value);\n    },\n    /**\n     * Retrieves the message value for a given element.\n     *\n     * @param {Element} el - The DOM element whose message value is retrieved.\n     * @returns {string} - The resolved message value.\n     */\n    get: (el) => {\n      return store[el.id] ? store[el.id].value : \"\";\n    },\n    /**\n     * Clears the message parameters and value for a given element.\n     *\n     * @param {Element} el - The DOM element whose message entry will be cleared.\n     */\n    clear: (el) => {\n      store[el.id].param = [];\n      store[el.id].value = \"\";\n      store[el.id].handleMessage(\"\");\n    },\n  };\n};\n", "/**\n * @module fieldValidator\n * This module provides functionality to create a field validator function for validating form field elements in Alpine.js applications.\n */\n\n// @deno-types=\"@types/alpinejs\"\nimport type { Alpine } from \"alpinejs\";\nimport type { FieldValidationConfig } from \"../types/config_types.ts\";\nimport type { CreateFieldValidator } from \"../types/validators_types.ts\";\nimport type { FormFieldElements, Functions } from \"../types/functions_types.ts\";\n\n/**\n * Creates a field validator function for form field validation.\n *\n * @param {Alpine} Alpine - The Alpine.js instance used for prefixing events.\n * @returns {(el: FormFieldElements, config: FieldValidationConfig, functions: Functions) => () => void} A function that validates the form field elements.\n */\nexport const createFieldValidator: CreateFieldValidator = (Alpine: Alpine) =>\n(\n  el: FormFieldElements,\n  config: FieldValidationConfig,\n  {\n    messageStore,\n    html5ValidationMessageResolver,\n    fieldValueResolver,\n    customFieldValidators,\n  }: Functions,\n) => {\n  return function () {\n    messageStore.clear(el);\n\n    if (!el.checkValidity()) {\n      messageStore.set(\n        el,\n        html5ValidationMessageResolver(el, config.m) ?? [],\n      );\n      el.dispatchEvent(\n        new CustomEvent(`${Alpine.prefixed(\"validate\")}:failed`),\n      );\n      return;\n    }\n\n    const value = fieldValueResolver.resolve(el);\n\n    if (!el.required && fieldValueResolver.isEmpty(value)) {\n      messageStore.clear(el);\n      el.dispatchEvent(\n        new CustomEvent(`${Alpine.prefixed(\"validate\")}:success`),\n      );\n      return;\n    }\n\n    for (const [key, { v, m }] of Object.entries(config.v)) {\n      if (typeof v === \"function\") {\n        if (!v(el, value)) {\n          messageStore.set(el, m);\n          el.dispatchEvent(\n            new CustomEvent(`${Alpine.prefixed(\"validate\")}:failed`),\n          );\n          return;\n        }\n        continue;\n      }\n\n      for (const customValidator of customFieldValidators) {\n        if (\n          customValidator.isSupported(key) &&\n          !customValidator.validate(el, value, key, v)\n        ) {\n          messageStore.set(el, m);\n          el.dispatchEvent(\n            new CustomEvent(`${Alpine.prefixed(\"validate\")}:failed`),\n          );\n          return;\n        }\n      }\n    }\n    el.dispatchEvent(\n      new CustomEvent(`${Alpine.prefixed(\"validate\")}:success`),\n    );\n  };\n};\n", "/**\n * @module formValidator\n * This module provides functionality to create a form validation function for validating form elements in Alpine.js applications.\n */\n\nimport type { FormValidationConfig } from \"../types/config_types.ts\";\nimport type { CreateFormValidator } from \"../types/validators_types.ts\";\n\n/**\n * Creates a form validation function that validates each element\n * within a form and optionally reports its validity.\n *\n * @param {HTMLFormElement} form - The form element containing elements to validate.\n * @param {FormValidationConfig} config - Configuration options for form validation, including whether to report validity.\n * @param {boolean} config.report - If true, the form's validity is reported to the user using reportValidity().\n * @returns {() => boolean} - A function that performs validation and returns whether the form is valid.\n */\nexport const createFormValidator: CreateFormValidator = (\n  form: HTMLFormElement,\n  { report }: FormValidationConfig,\n) => {\n  return function () {\n    Array.from(form.elements).forEach((el) => {\n      (el as { _x_validation?: { validate: () => void } })._x_validation\n        ?.validate();\n    });\n\n    if (report) {\n      return form.reportValidity();\n    } else {\n      return form.checkValidity();\n    }\n  };\n};\n", "/**\n * @module validationPlugin\n * This module provides a validation plugin for Alpine.js, enabling form and field validations.\n */\n\n// @deno-types=\"@types/alpinejs\"\nimport type {\n  DirectiveData,\n  DirectiveUtilities,\n  ElementWithXAttributes,\n} from \"alpinejs\";\nimport type { Alpine } from \"./types/alpine_types.ts\";\nimport { debounce, merge, throttle } from \"./utils/index.ts\";\nimport {\n  fieldDefaultConfig,\n  formatMessageConfig,\n  formatValidationConfig,\n  formDefaultConfig,\n} from \"./config/index.ts\";\nimport {\n  createFieldValueResolver,\n  createHtml5ValidationMessageResolver,\n  createInputRateLimitter,\n  createMessageResolver,\n  createMessageStore,\n} from \"./functions/index.ts\";\nimport {\n  createFieldValidator,\n  createFormValidator,\n} from \"./validators/index.ts\";\nimport type {\n  FieldValidationConfig,\n  FieldValidationOption,\n  FormValidationConfig,\n  FormValidationOption,\n} from \"./types/config_types.ts\";\nimport type {\n  CreateMessageStore,\n  FormFieldElements,\n  Functions,\n  FunctionsOption,\n} from \"./types/functions_types.ts\";\nimport type {\n  CreateFieldValidator,\n  CreateFormValidator,\n} from \"./types/validators_types.ts\";\n\n/**\n * Creates a validation plugin for Alpine.js using the provided utilities and configurations.\n *\n * @param {Object} options - Options for creating the validation plugin.\n * @param {CreateMessageStore} options.createMessageStore - Function to create a message store.\n * @param {CreateFormValidator} options.createFormValidator - Function to create a form validator.\n * @param {CreateFieldValidator} options.createFieldValidator - Function to create a field validator.\n * @param {function(EventTarget): FormValidationConfig} options.formDefaultConfig - Function that returns default form validation configuration.\n * @param {function(): FieldValidationConfig} options.fieldDefaultConfig - Function that returns default field validation configuration.\n * @returns {function({defaultFunctionsOptions?: FunctionsOption, defaultFormOptions?: FormValidationOption, defaultFieldOptions?: FieldValidationOption}=): function(Alpine: Alpine): void} - A function to configure and initialize the plugin with optional default configurations.\n */\nexport const createValidatePluginInternal = (\n  {\n    createMessageStore,\n    createFormValidator,\n    createFieldValidator,\n    formDefaultConfig,\n    fieldDefaultConfig,\n  }: {\n    createMessageStore: CreateMessageStore;\n    createFormValidator: CreateFormValidator;\n    createFieldValidator: CreateFieldValidator;\n    formDefaultConfig: (el: EventTarget) => FormValidationConfig;\n    fieldDefaultConfig: () => FieldValidationConfig;\n  },\n) =>\n(\n  {\n    defaultFunctionsOptions = {},\n    defaultFormOptions = {},\n    defaultFieldOptions = {},\n  }: {\n    defaultFunctionsOptions?: FunctionsOption;\n    defaultFormOptions?: FormValidationOption;\n    defaultFieldOptions?: FieldValidationOption;\n  } = {},\n) =>\n(Alpine: Alpine): void => {\n  const functions: Functions = (() => {\n    const opts = {\n      fieldValueResolver: defaultFunctionsOptions.fieldValueResolver ??\n        createFieldValueResolver(),\n      messageResolver: defaultFunctionsOptions.messageResolver ??\n        createMessageResolver(),\n      customFieldValidators: defaultFunctionsOptions.customFieldValidators ??\n        [],\n      inputRateLimitter: defaultFunctionsOptions.inputRateLimitter ??\n        createInputRateLimitter(debounce, throttle),\n      html5ValidationMessageResolver:\n        defaultFunctionsOptions.html5ValidationMessageResolver ??\n          createHtml5ValidationMessageResolver(),\n    };\n    return {\n      ...opts,\n      messageStore: defaultFunctionsOptions.messageStore ??\n        createMessageStore(Alpine)(opts),\n    };\n  })();\n\n  Alpine.directive(\n    \"validate-form\",\n    (\n      el: ElementWithXAttributes,\n      { expression }: DirectiveData,\n      { evaluate, cleanup }: DirectiveUtilities,\n    ) => {\n      /**\n       * Merges and returns the form validation configuration for the element.\n       * @returns {FormValidationConfig} - The merged form validation configuration.\n       */\n      const config: FormValidationConfig = (() => {\n        const formConfig = { ...formDefaultConfig(el) };\n        const formOptions = { ...defaultFormOptions };\n        const formExpression = {\n          ...(expression ? evaluate(expression) : {}) as FormValidationOption,\n        };\n\n        const merged: FormValidationConfig = merge(\n          formConfig,\n          formOptions,\n          formExpression,\n        );\n\n        merged.trigger.target = (formExpression.trigger?.target ??\n          formOptions.trigger?.target ??\n          formConfig.trigger.target) as EventTarget;\n\n        return merged;\n      })();\n\n      // console.log(config);\n\n      const { before, after, preventDefault } = config.trigger;\n      const formValidator = createFormValidator(el as HTMLFormElement, config);\n\n      /**\n       * Handles the form validation event, invoking configured callbacks and triggering success or failure events.\n       * @param {Event} event - The event that triggered form validation.\n       */\n      const handleEvent = (event: Event) => {\n        before?.call(el, event);\n        const isValid = formValidator.call(el);\n        after?.call(el, event);\n\n        if (!isValid && preventDefault) {\n          event.preventDefault();\n        }\n\n        if (isValid) {\n          el.dispatchEvent(\n            new CustomEvent(`${Alpine.prefixed(\"validate\")}:success`),\n          );\n        } else {\n          el.dispatchEvent(\n            new CustomEvent(`${Alpine.prefixed(\"validate\")}:failed`),\n          );\n        }\n      };\n\n      const { target, event: eventName } = config.trigger;\n      target.addEventListener(eventName, handleEvent);\n\n      (el as { _x_validation?: FormValidationConfig })._x_validation = config;\n      cleanup(() => {\n        target.removeEventListener(eventName, handleEvent);\n        delete (el as { _x_validation?: FormValidationConfig })._x_validation;\n      });\n    },\n  );\n\n  Alpine.directive(\n    \"validate\",\n    (\n      el: ElementWithXAttributes,\n      { expression }: DirectiveData,\n      { evaluate, cleanup }: DirectiveUtilities,\n    ) => {\n      if (!el.id || !(el as FormFieldElements).name) {\n        throw new Error(\n          \"Validation error: Form elements with validation rules must have an id and name attribute.\",\n        );\n      }\n\n      /**\n       * Merges and returns the field validation configuration for the element.\n       * @returns {FieldValidationConfig} - The merged field validation configuration.\n       */\n      const config: FieldValidationConfig = (() => {\n        const inputConfig = merge(\n          fieldDefaultConfig(),\n          defaultFieldOptions,\n          (el as FormFieldElements).form?._x_validation?.report != null\n            ? {\n              report: (el as FormFieldElements).form?._x_validation.report,\n            }\n            : {},\n          expression ? evaluate(expression) : {},\n        );\n        inputConfig.v = formatValidationConfig(inputConfig.v);\n        inputConfig.m = formatMessageConfig(inputConfig.m);\n        return inputConfig;\n      })();\n\n      // console.log(config);\n\n      const validate = createFieldValidator(Alpine)(\n        el as FormFieldElements,\n        config,\n        functions,\n      );\n\n      /**\n       * Creates a validation field handler to manage before and after hooks.\n       * @param {Object} hooks - Before and after hooks.\n       * @param {function} validate - The validation function to call.\n       * @returns {function(Event=): void} - The event handler function.\n       */\n      const createValidateFieldHandler = (\n        { before, after }: {\n          before?: ((e?: Event) => void) | null;\n          after?: ((e?: Event) => void) | null;\n        },\n        validate: () => void,\n      ) => {\n        return (e?: Event) => {\n          before?.call(el, e);\n          validate.apply(el);\n          (el as FormFieldElements)._x_validation?.formSubmit &&\n            config.report && (el as FormFieldElements).reportValidity();\n          after?.call(el, e);\n        };\n      };\n\n      const events: { eventName: string; handler: (e: Event) => void }[] = [];\n\n      /**\n       * Registers an event handler based on given conditions.\n       * @param {boolean} condition - Condition to check before registering.\n       * @param {string} eventName - Name of the event.\n       * @param {function(Event): void} eventHandler - The event handler function.\n       */\n      const registerEvent = (\n        condition: boolean,\n        eventName: string,\n        eventHandler: (e: Event) => void,\n      ) => {\n        if (condition && eventHandler) {\n          events.push({ eventName, handler: eventHandler });\n        }\n      };\n\n      registerEvent(\n        !!config.onChange || (!config.onBlur && !config.onInput),\n        \"change\",\n        createValidateFieldHandler(\n          !config.onChange || config.onChange === true ? {} : config.onChange,\n          validate,\n        ),\n      );\n      registerEvent(\n        !!config.onBlur,\n        \"blur\",\n        createValidateFieldHandler(\n          !config.onBlur || config.onBlur === true ? {} : config.onBlur,\n          validate,\n        ),\n      );\n      registerEvent(\n        !!config.onInput,\n        \"input\",\n        functions.inputRateLimitter(\n          el,\n          createValidateFieldHandler(\n            !config.onInput || config.onInput === true ? {} : config.onInput,\n            validate,\n          ),\n          config,\n        ),\n      );\n\n      (el as FormFieldElements)._x_validation = {\n        ...config,\n        formSubmit: !(el as FormFieldElements).form,\n        validate: function () {\n          validate();\n          this.formSubmit = true;\n          if ([\"radio\", \"checkbox\"].includes((el as FormFieldElements).type)) {\n            Array.from<FormFieldElements>(\n              (el as FormFieldElements).form?.querySelectorAll(\n                `input[type=\"${(el as FormFieldElements).type}\"][name=\"${\n                  (el as FormFieldElements).name\n                }\"]`,\n              ) ?? [],\n            )\n              .filter((elem: FormFieldElements) =>\n                elem !== el && !elem.hasAttribute(Alpine.prefixed(\"validate\"))\n              )\n              .forEach((elem: FormFieldElements) => {\n                events.forEach(({ eventName, handler }) => {\n                  elem.addEventListener(eventName, handler);\n                });\n              });\n          }\n        },\n      };\n\n      functions.messageStore.create(\n        el as FormFieldElements,\n        (message) => {\n          (el as FormFieldElements).setCustomValidity(message);\n        },\n      );\n\n      events.forEach(({ eventName, handler }) => {\n        el.addEventListener(eventName, handler);\n      });\n\n      cleanup(() => {\n        if ([\"radio\", \"checkbox\"].includes((el as FormFieldElements).type)) {\n          Array.from<FormFieldElements>(\n            (el as FormFieldElements).form?.querySelectorAll(\n              `input[type=\"${(el as FormFieldElements).type}\"][name=\"${\n                (el as FormFieldElements).name\n              }\"]`,\n            ) ?? [],\n          )\n            .filter((elem: FormFieldElements) =>\n              elem !== el && !elem.hasAttribute(Alpine.prefixed(\"validate\"))\n            )\n            .forEach((elem: FormFieldElements) => {\n              events.forEach(({ eventName, handler }) => {\n                elem.removeEventListener(eventName, handler);\n              });\n            });\n        }\n        events.forEach(({ eventName, handler }) => {\n          el.removeEventListener(eventName, handler);\n          (handler as { cancel?: () => void }).cancel?.();\n        });\n        functions.messageStore.delete(el as FormFieldElements);\n        delete (el as FormFieldElements)._x_validation;\n      });\n    },\n  );\n\n  Alpine.directive(\n    \"validate-message-for\",\n    (\n      el: ElementWithXAttributes,\n      { expression }: DirectiveData,\n      { effect }: DirectiveUtilities,\n    ) => {\n      /**\n       * Evaluates and updates the text content based on the validation message store.\n       */\n      effect(() => {\n        const field = document.querySelector(expression);\n        Alpine.mutateDom(() => {\n          el.textContent = field\n            ? functions.messageStore.get(field as FormFieldElements)\n            : \"\";\n        });\n      });\n    },\n  );\n};\n\n/**\n * Creates a validation plugin for Alpine.js with optional configurations.\n *\n * @param {Object?} [options] - Optional configuration for the validation plugin.\n * @param {FunctionsOption?} [options.defaultFunctionsOptions] - Default functions options.\n * @param {FormValidationOption?} [options.defaultFormOptions] - Default form validation options.\n * @param {FieldValidationOption?} [options.defaultFieldOptions] - Default field validation options.\n * @returns {function(Alpine: Alpine): void} - A function that initializes a validation plugin for Alpine.js.\n */\nexport const createValidatePlugin: (\n  options?: {\n    defaultFunctionsOptions?: FunctionsOption;\n    defaultFormOptions?: FormValidationOption;\n    defaultFieldOptions?: FieldValidationOption;\n  },\n) => (Alpine: Alpine) => void = createValidatePluginInternal({\n  createMessageStore,\n  createFormValidator,\n  createFieldValidator,\n  formDefaultConfig,\n  fieldDefaultConfig,\n});\n\n/**\n * Initializes and returns a default validation plugin instance for Alpine.js.\n *\n * @param {Alpine} Alpine - The Alpine.js instance to which the validation plugin will be integrated.\n * @returns {void} - The function does not return a value; it directly integrates the plugin with Alpine.js.\n */\nexport const createValidatePluginDefault: (Alpine: Alpine) => void =\n  createValidatePlugin();\n", "/**\n * @module alpineI18NextPlugin\n * This module provides an i18Next plugin for Alpine.js to facilitate internationalization.\n */\n\nimport type { i18n, TOptions } from \"i18next\";\n// @deno-types=\"@types/alpinejs\"\nimport type {\n  Alpine,\n  DirectiveData,\n  DirectiveUtilities,\n  ElementWithXAttributes,\n} from \"alpinejs\";\n\n/**\n * Creates an i18Next plugin for Alpine.js to handle internationalization.\n *\n * @param {Object} store - Contains configuration for i18next integration.\n * @param {number} store.timestamp - A timestamp to track updates.\n * @param {function} store.i18next - A function that returns the i18next instance.\n * @returns {(Alpine: Alpine) => void} A function accepting an Alpine instance to set up i18next integration.\n */\nexport const createI18NextPlugin =\n  (store: { timestamp: number; i18next: () => i18n }) =>\n  (Alpine: Alpine): void => {\n    const i18next = store.i18next();\n\n    /**\n     * Updates the timestamp to track changes.\n     * @private\n     */\n    const update = () => store.timestamp = Date.now();\n\n    [\"languageChanged\", \"loaded\"].forEach((event) => i18next.on(event, update));\n    ([\"added\", \"removed\"] as const).forEach((event) =>\n      i18next.store.on(event, update)\n    );\n\n    /**\n     * Adds the `$t` magic property to translate keys using i18next.\n     */\n    Alpine.magic(\"t\", () => (key: string | string[], options: TOptions) => {\n      store.timestamp;\n      return i18next.t(key, options);\n    });\n\n    /**\n     * Adds the `$i18next` magic property to access the full i18next instance.\n     */\n    Alpine.magic(\"i18next\", () => () => {\n      return i18next;\n    });\n\n    /**\n     * Defines a custom directive `x-i18next-text` to update text content based on i18next translations.\n     */\n    Alpine.directive(\n      \"i18next-text\",\n      (\n        el: ElementWithXAttributes,\n        { expression }: DirectiveData,\n        { evaluateLater, effect }: DirectiveUtilities,\n      ) => {\n        const args = evaluateLater<[string, TOptions | undefined]>(\n          expression,\n        );\n        /**\n         * Reactively updates the element's text content based on the evaluated expression.\n         */\n        effect(() => {\n          store.timestamp;\n          args(([key, options]: [string, TOptions | undefined]) => {\n            Alpine.mutateDom(() => {\n              el.textContent = i18next.t(key, options);\n            });\n          });\n        });\n      },\n    );\n  };\n"],
  "mappings": "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",
  "names": ["debounce", "el", "func", "wait", "immediate", "timeout", "debounced", "e", "callNow", "throttle", "el", "func", "wait", "leading", "trailing", "lastFunc", "lastRan", "throttled", "e", "now", "remaining", "merge", "first", "rest", "result", "acc", "obj", "key", "value", "formatMessageConfig", "input", "result", "key", "value", "formatValidationConfig", "abbreviated", "result", "key", "value", "v", "m", "formDefaultConfig", "el", "fieldDefaultConfig", "createCustomFieldValidator", "validator", "name", "_el", "value", "args", "validateFunc", "result", "createFieldValueResolver", "el", "value", "form", "selected", "checkboxes", "checkbox", "option", "createHtml5ValidationMessageResolver", "validityKeys", "el", "messages", "key", "k", "createInputRateLimitter", "debounce", "throttle", "el", "handler", "inputLimit", "inputLimitOpts", "method", "wait", "createMessageResolver", "args", "createMessageStore", "Alpine", "messageResolver", "store", "value", "el", "handleMessage", "message", "createFieldValidator", "Alpine", "el", "config", "messageStore", "html5ValidationMessageResolver", "fieldValueResolver", "customFieldValidators", "value", "key", "v", "m", "customValidator", "createFormValidator", "form", "report", "el", "createValidatePluginInternal", "createMessageStore", "createFormValidator", "createFieldValidator", "formDefaultConfig", "fieldDefaultConfig", "defaultFunctionsOptions", "defaultFormOptions", "defaultFieldOptions", "Alpine", "functions", "opts", "createFieldValueResolver", "createMessageResolver", "createInputRateLimitter", "debounce", "throttle", "createHtml5ValidationMessageResolver", "el", "expression", "evaluate", "cleanup", "config", "formConfig", "formOptions", "formExpression", "merged", "merge", "before", "after", "preventDefault", "formValidator", "handleEvent", "event", "isValid", "target", "eventName", "inputConfig", "formatValidationConfig", "formatMessageConfig", "validate", "createValidateFieldHandler", "e", "events", "registerEvent", "condition", "eventHandler", "elem", "handler", "message", "effect", "field", "createValidatePlugin", "createValidatePluginDefault", "createI18NextPlugin", "store", "Alpine", "i18next", "update", "event", "key", "options", "el", "expression", "evaluateLater", "effect", "args"]
}
